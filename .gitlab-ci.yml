#
# Generated by: hguild source:run Catalyst gitlabCIBuildYML
#
include:
    - template: Security/Secret-Detection.gitlab-ci.yml
    - template: Security/SAST.gitlab-ci.yml

variables:
    HGUILD_PROJECT_NAME: libWexpr
    HGUILD: _HGuild/Source/HGuild@master/Prefix/hguild
    HGUILD_GIT_USE_HTTPS: 1
    SAST_EXCLUDED_ANALYZERS: ""

# Note: this is here instead of variables cause gitlab expands it oddly otherwise
# We blank it out first to prevent upper files (read: osx's keychain helper) from taking over it
.hguild_setup_git: &hguild_setup_git |-
    git config --global --replace-all credential.helper ''
    git config --global --add credential.helper '!f() { sleep 1; echo "username=gitlab-ci-token\npassword=${CI_JOB_TOKEN}"; }; f'

.hguild_setup_hguild: &hguild_setup_hguild |-
    echo -e "section_start:`date +%s`:hguild_setup[collapsed=true]\r\033[0KHGuild CI Setup"
    curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCISetup.rb' | ruby -- -
    echo -e "section_end:`date +%s`:hguild_setup\r\033[0K"

.hguild_packages_update: &hguild_packages_update |-
    echo -e "section_start:`date +%s`:hguild_updating_packages[collapsed=true]\r\033[0KHGuild packages:update"
    ${HGUILD} packages:update
    echo -e "section_end:`date +%s`:hguild_updating_packages\r\033[0K"

.hguild_before_script: &hguild_before_script
    - *hguild_setup_git
    - *hguild_setup_hguild
    - *hguild_packages_update

.hguild_before_script_no_packages: &hguild_before_script_no_packages
    - *hguild_setup_git
    - *hguild_setup_hguild

stages:
    - prepare
    - build
    - test
    - package
    - deploy




Linux-X86_64@Clang@@~Debug:Prepare:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



Linux-X86_64@Clang@@~Debug:Build:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    needs:
      - Linux-X86_64@Clang@@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Linux-X86_64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/Linux-X86_64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








Linux-X86_64@Clang@@~Debug:Package:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Linux-X86_64@Clang@@~Debug:Build
    needs:
        - Linux-X86_64@Clang@@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - linux
        - docker
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



Linux-X86_64@Clang@@~Debug:Deploy:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Linux-X86_64@Clang@@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - linux
        - docker
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



Linux-X86_64@Clang@@~Release:Prepare:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Linux-X86_64@Clang@@~Release"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Release

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



Linux-X86_64@Clang@@~Release:Build:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    needs:
      - Linux-X86_64@Clang@@~Release:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Linux-X86_64@Clang@@/Release/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Linux-X86_64@Clang@@~Release"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Release

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/Linux-X86_64@Clang@@/Release/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








Linux-X86_64@Clang@@~Release:Package:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Release
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Linux-X86_64@Clang@@~Release:Build
    needs:
        - Linux-X86_64@Clang@@~Release:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Release"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - linux
        - docker
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



Linux-X86_64@Clang@@~Release:Deploy:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Linux-X86_64@Clang@@~Release:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Release
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Release"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - linux
        - docker
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 



macOS-ARM64@Clang@@~Debug:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



macOS-ARM64@Clang@@~Debug:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@@~Debug:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@@~Debug:Build
    needs:
        - macOS-ARM64@Clang@@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@@~Debug:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



macOS-ARM64@Clang@@~RelWithDebInfo:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



macOS-ARM64@Clang@@~RelWithDebInfo:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@@~RelWithDebInfo:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Build
    needs:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@@~RelWithDebInfo:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 



macOS-ARM64@Clang@macOS-X86_64@~Debug:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~Debug:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@macOS-X86_64@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@macOS-X86_64@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@macOS-X86_64@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@macOS-X86_64@~Debug:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Build
    needs:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~Debug:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@macOS-X86_64@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@macOS-X86_64@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build
    needs:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - ${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"
        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 
 


Scheduler:
    only:
      - schedules
      
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        HGUILD_SOURCENAME: libWexpr@CI

    before_script:
        - *hguild_before_script
    
    script:
      - echo -e "section_start:`date +%s`:run_scheduler\r\033[0KRun Scheduler"
      - Support/gitlabScheduler.rb
      - echo -e "section_end:`date +%s`:run_scheduler\r\033[0K"



CodeQualityClangTidy:

    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: test

    needs:
      - Linux-X86_64@Clang@@~Debug:Build
      
    except:
      - schedules

    artifacts:
        reports:
          codequality: "codequality-clangtidy.json"
        paths:
          - "codequality-clangtidy.json"

    tags:
        - linux
        - docker
        - x86_64
    
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        HGUILD_SOURCENAME: libWexpr@CI

    before_script:
      - *hguild_before_script

    script:
      - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
      - ${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --customSourceDir . --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI
      - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"
      - echo -e "section_start:`date +%s`:run_scheduler\r\033[0KRun clang-tidy coverage"
      - export BUILD_DIR=`${HGUILD} source:buildPath --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_SOURCENAME}`
      - export CATALYST_INSTALL_DIR=`${HGUILD} source:installPath --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" Catalyst`
      - ruby ${CATALYST_INSTALL_DIR}Catalyst/Scripts/clangTidyCodeClimate.rb --sourceDir . --buildDir "${BUILD_DIR}" --ignorePaths '*/Private/ThirdParty/*' --ignoreChecks 'modernize-use-trailing-return-type;hicpp-deprecated-headers;modernize-deprecated-headers' > codequality-clangtidy.json
      - echo -e "section_end:`date +%s`:run_scheduler\r\033[0K"



