#
# Generated by: hguild source:run Catalyst gitlabCIBuildYML
#
include:
 
    - template: Security/Secret-Detection.gitlab-ci.yml
    - template: Security/SAST.gitlab-ci.yml

variables:
    HGUILD_PROJECT_NAME: libWexpr
    HGUILD: _HGuild/Source/HGuild@master/Prefix/hguild
    HGUILD_WIN: _HGuild/Source/HGuild@master/Prefix/hguild.bat
    HGUILD_GIT_USE_HTTPS: 1
    HGUILD_ALWAYS_SHOW_PROCESS_HEADERS: 1
    SAST_EXCLUDED_ANALYZERS: ""

# Note: this is here instead of variables cause gitlab expands it oddly otherwise
# We blank it out first to prevent upper files (read: osx's keychain helper) from taking over it
.hguild_setup_git: &hguild_setup_git |-
    git config --global --replace-all credential.helper ''
    git config --global --add credential.helper '!f() { sleep 1; echo "username=gitlab-ci-token\npassword=${CI_JOB_TOKEN}"; }; f'

.hguild_setup_git_windows: &hguild_setup_git_windows |-
    echo "Ignoring setup_git"

.hguild_setup_hguild: &hguild_setup_hguild |-
    echo -e "section_start:`date +%s`:hguild_setup\r\033[0KHGuild CI Setup"
    curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCISetup.rb' | ruby -- - _HGuild
    echo -e "section_end:`date +%s`:hguild_setup\r\033[0K"

.hguild_setup_hguild_windows: &hguild_setup_hguild_windows |-
    echo "HGuild CI Setup"
    $TempFile = New-TemporaryFile
    Invoke-WebRequest 'https://developer.i.hackerguild.com/HGuildCI/hguildCISetup.rb' -OutFile $TempFile
    ruby $TempFile _HGuild
    rm $TempFile
    echo "END HGuild CI Setup"

.hguild_sources_update: &hguild_sources_update |-
    echo -e "section_start:`date +%s`:hguild_updating_sources\r\033[0KHGuild sources:update"
    ${HGUILD} sources:update
    echo -e "section_end:`date +%s`:hguild_updating_sources\r\033[0K"

.hguild_sources_update_windows: &hguild_sources_update_windows |-
    echo "HGuild sources:update"
    & ./$env:HGUILD_WIN packages:update
    echo "END HGuild sources:update"

.hguild_packages_update: &hguild_packages_update |-
    echo -e "section_start:`date +%s`:hguild_updating_packages\r\033[0KHGuild packages:update"
    ${HGUILD} packages:update
    echo -e "section_end:`date +%s`:hguild_updating_packages\r\033[0K"

.hguild_packages_update_windows: &hguild_packages_update_windows |-
    echo "HGuild packages:update"
    & ./$env:HGUILD_WIN packages:update
    echo "END HGuild packages:update"

.hguild_setup_source_symlink: &hguild_setup_source_symlink |-
    echo -e "section_start:`date +%s`:hguild_setup_source_symlink\r\033[0KHGuild setup symlink"
    rm -fv _HGuild/Source/libWexpr@CI
    ln -sv $CI_PROJECT_DIR _HGuild/Source/libWexpr@CI
    echo -e "section_end:`date +%s`:hguild_setup_source_symlink\r\033[0K"

.hguild_setup_source_symlink_windows: &hguild_setup_source_symlink_windows |-
    echo "HGuild setup symlink"
    If (Test-Path "_HGuild/Source/libWexpr@CI") { (Get-Item "_HGuild/Source/libWexpr@CI").Delete() }
    New-Item -ItemType SymbolicLink -Target "$env:CI_PROJECT_DIR" -Path "_HGuild/Source/libWexpr@CI"
    echo "END HGuild setup symlink"


.hguild_before_script: &hguild_before_script
    - *hguild_setup_git
    - *hguild_setup_hguild
    - *hguild_setup_source_symlink
    - *hguild_packages_update
    - *hguild_sources_update

.hguild_before_script_windows: &hguild_before_script_windows
    - *hguild_setup_git_windows
    - *hguild_setup_hguild_windows
    - *hguild_setup_source_symlink_windows
    - *hguild_packages_update_windows
    - *hguild_sources_update_windows

.hguild_before_script_no_packages: &hguild_before_script_no_packages
    - *hguild_setup_git
    - *hguild_setup_hguild
    - *hguild_setup_source_symlink

.hguild_before_script_no_packages_windows: &hguild_before_script_no_packages_windows
    - *hguild_setup_git_windows
    - *hguild_setup_hguild_windows
    - *hguild_setup_source_symlink_windows

.runWolfTestsXUnit: &runWolfTestsXUnit
    - |
          for i in _HGuild/Install/$HGUILD_PROFILE/$HGUILD_BUILDTYPE/libWexpr@CI/Wolf/Tests/* ; do
            name=$(basename "${i}")
            echo ">> Running test: ${i}"
            "${i}" --outputFormat xunit --output "${name}".xunit.xml
          done

.runWolfTestsXUnit_windows: &runWolfTestsXUnit_windows
    - |
        Get-ChildItem "_HGuild/Install/$($env:HGUILD_PROFILE)/$($env:HGUILD_BUILDTYPE)/libWexpr@CI/Wolf/Tests" -Filter *.exe | Foreach-Object {
            Write-Output ">> Running $($_.FullName)"
            & "$($_.FullName)" --outputFormat xunit --output "$($_.Basename).xunit.xml"
        }


stages:
    - prepare
    - build
    - test
    - package
    - deploy




Linux-X86_64@Clang@@~Debug:Prepare:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


Linux-X86_64@Clang@@~Debug:Build:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    needs:
      - Linux-X86_64@Clang@@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Linux-X86_64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/Linux-X86_64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








Linux-X86_64@Clang@@~Debug:Package:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Linux-X86_64@Clang@@~Debug:Build
    needs:
        - Linux-X86_64@Clang@@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - linux
        - docker
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



Linux-X86_64@Clang@@~Debug:Deploy:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Linux-X86_64@Clang@@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - linux
        - docker
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



Linux-X86_64@Clang@@~RelWithDebInfo:Prepare:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Linux-X86_64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


Linux-X86_64@Clang@@~RelWithDebInfo:Build:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    except:
      - schedules

    needs:
      - Linux-X86_64@Clang@@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Linux-X86_64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Linux-X86_64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/Linux-X86_64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








Linux-X86_64@Clang@@~RelWithDebInfo:Package:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Linux-X86_64@Clang@@~RelWithDebInfo:Build
    needs:
        - Linux-X86_64@Clang@@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - linux
        - docker
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



Linux-X86_64@Clang@@~RelWithDebInfo:Deploy:
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Linux-X86_64@Clang@@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Linux-X86_64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - linux
        - docker
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 



macOS-ARM64@Clang@@~Debug:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


macOS-ARM64@Clang@@~Debug:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@@~Debug:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@@~Debug:Build
    needs:
        - macOS-ARM64@Clang@@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@@~Debug:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



macOS-ARM64@Clang@@~RelWithDebInfo:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


macOS-ARM64@Clang@@~RelWithDebInfo:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@@~RelWithDebInfo:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Build
    needs:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@@~RelWithDebInfo:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 



macOS-ARM64@Clang@macOS-X86_64@~Debug:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


macOS-ARM64@Clang@macOS-X86_64@~Debug:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@macOS-X86_64@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@macOS-X86_64@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@macOS-X86_64@/Debug/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@macOS-X86_64@~Debug:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Build
    needs:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~Debug:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        



macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"


macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build:

    except:
      - schedules

    needs:
      - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/macOS-ARM64@Clang@macOS-X86_64@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - ninja
        - osx
        - clang
        - arm64
        
    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_build_and_install\r\033[0KHGuild Build and Install"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_build_and_install\r\033[0K"
        # For at least eslint, it'll run as a different user, while the CI runs as root
        # thinlto.cache however doesnt allow read access to other users - adjust that just within CI
        - find _HGuild/Build/macOS-ARM64@Clang@macOS-X86_64@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI -name 'thinlto.cache' -exec chmod -Rv o+rx '{}' ';'








macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Package:

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build
    needs:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    before_script:
        - *hguild_before_script_no_packages

    script:
        - echo -e "section_start:`date +%s`:hguild_package\r\033[0KHGuild Package"
        - '${HGUILD} source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo -e "section_end:`date +%s`:hguild_package\r\033[0K"



macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: macOS-ARM64@Clang@macOS-X86_64@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "macOS-ARM64@Clang@macOS-X86_64@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - ninja
        - osx
        - clang
        - arm64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo -e "section_start:`date +%s`:upload_package\r\033[0KUpload Package"

        - curl -fsSL 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' | ruby -- - "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}

        - echo -e "section_end:`date +%s`:upload_package\r\033[0K"
        
        
 



Windows-X86_64@MSVC17@@~Debug:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Windows-X86_64@MSVC17@@~Debug"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - windows
        - msvc17
        - x86_64
        
    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script_windows

    script:
        - echo "HGuild Install Deps"
        - '& ./$env:HGUILD_WIN install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo "END HGuild Install Deps"


Windows-X86_64@MSVC17@@~Debug:Build:

    except:
      - schedules

    needs:
      - Windows-X86_64@MSVC17@@~Debug:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Windows-X86_64@MSVC17@@/Debug/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Windows-X86_64@MSVC17@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - windows
        - msvc17
        - x86_64
        
    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: Debug

    before_script:
        - *hguild_before_script_windows

    script:
        - echo "HGuild Build and Install"
        - '& ./$env:HGUILD_WIN install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo "END HGuild Build and Install"








Windows-X86_64@MSVC17@@~Debug:Package:

    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Windows-X86_64@MSVC17@@~Debug:Build
    needs:
        - Windows-X86_64@MSVC17@@~Debug:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Windows-X86_64@MSVC17@@~Debug"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - windows
        - msvc17
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages_windows

    script:
        - echo "HGuild Package"
        - '& ./$env:HGUILD_WIN source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo "END HGuild Package"



Windows-X86_64@MSVC17@@~Debug:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Windows-X86_64@MSVC17@@~Debug:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: Debug
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Windows-X86_64@MSVC17@@~Debug"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - windows
        - msvc17
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo "Upload Package"

        - $TempFile = New-TemporaryFile
        - Invoke-WebRequest 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' -OutFile $TempFile
        - ruby $TempFile "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - rm $TempFile

        - echo "END Upload Package"
        
        



Windows-X86_64@MSVC17@@~RelWithDebInfo:Prepare:

    except:
      - schedules

    # no artifacts - this just caches and makes sure our deps are good
    cache:
        key: "Windows-X86_64@MSVC17@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: prepare
    dependencies: []
    tags:
        - windows
        - msvc17
        - x86_64
        
    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script_windows

    script:
        - echo "HGuild Install Deps"
        - '& ./$env:HGUILD_WIN install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo "END HGuild Install Deps"


Windows-X86_64@MSVC17@@~RelWithDebInfo:Build:

    except:
      - schedules

    needs:
      - Windows-X86_64@MSVC17@@~RelWithDebInfo:Prepare
    
    artifacts:
        paths:
        - _HGuild/Install/Windows-X86_64@MSVC17@@/RelWithDebInfo/${HGUILD_PROJECT_NAME}@CI
            
    cache:
        key: "Windows-X86_64@MSVC17@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: build
    dependencies: []
    tags:
        - windows
        - msvc17
        - x86_64
        
    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: RelWithDebInfo

    before_script:
        - *hguild_before_script_windows

    script:
        - echo "HGuild Build and Install"
        - '& ./$env:HGUILD_WIN install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI'
        - echo "END HGuild Build and Install"








Windows-X86_64@MSVC17@@~RelWithDebInfo:Package:

    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    dependencies:
        - Windows-X86_64@MSVC17@@~RelWithDebInfo:Build
    needs:
        - Windows-X86_64@MSVC17@@~RelWithDebInfo:Build
    except:
      - schedules

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Windows-X86_64@MSVC17@@~RelWithDebInfo"
        paths:
        - _HGuild/
 
    stage: package
    tags:
        - windows
        - msvc17
        - x86_64
    
    before_script:
        - *hguild_before_script_no_packages_windows

    script:
        - echo "HGuild Package"
        - '& ./$env:HGUILD_WIN source:install:package --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_PROJECT_NAME}@CI ${PACKAGE_NAME}'
        - echo "END HGuild Package"



Windows-X86_64@MSVC17@@~RelWithDebInfo:Deploy:
    only:
        - tags   # tags are stable
        - master # master branch we always want the newest ref
        # TODO? release branches. But we dont want to pickup issue branches.

    # package has no needs - requires everyone to finish the previous stages, and all tests to pass
    # we do want artifacts though from our build
    dependencies:
        - Windows-X86_64@MSVC17@@~RelWithDebInfo:Package
    except:
        - schedules

    variables:
        HGUILD_PROFILE: Windows-X86_64@MSVC17@@
        HGUILD_BUILDTYPE: RelWithDebInfo
        PACKAGE_NAME: ${HGUILD_PROJECT_NAME}@CI-${HGUILD_PROFILE}_${HGUILD_BUILDTYPE}.hguildpkg

    artifacts:
        paths:
        - ${PACKAGE_NAME}
            
    cache:
        key: "Windows-X86_64@MSVC17@@~RelWithDebInfo"
        paths:
        - _HGuild/

    stage: deploy
    tags:
        - windows
        - msvc17
        - x86_64
    
    # nothing to run - we literally just need the one file
    before_script: []

    script:
        - echo "Upload Package"

        - $TempFile = New-TemporaryFile
        - Invoke-WebRequest 'https://developer.i.hackerguild.com/HGuildCI/hguildCIUpload.rb' -OutFile $TempFile
        - ruby $TempFile "${HGUILD_PROJECT_NAME}" "${CI_COMMIT_REF_NAME}" "${HGUILD_PROFILE}" "${HGUILD_BUILDTYPE}" ${PACKAGE_NAME}
        - rm $TempFile

        - echo "END Upload Package"
        
        
 
 


Scheduler:
    only:
      - schedules
      
    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/
 
    stage: build
    tags:
        - linux
        - docker
        - x86_64
        
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        HGUILD_SOURCENAME: libWexpr@CI

    before_script:
        - *hguild_before_script
    
    script:
        - echo -e "section_start:`date +%s`:run_scheduler\r\033[0KRun Scheduler"
        - Support/gitlabScheduler.rb
        - echo -e "section_end:`date +%s`:run_scheduler\r\033[0K"



CodeQualityClangTidy:

    image: docker.i.hackerguild.com/hackerguild/hackerguild-gitlabci-docker:latest

    cache:
        key: "Linux-X86_64@Clang@@~Debug"
        paths:
        - _HGuild/

    stage: test

    needs:
      - Linux-X86_64@Clang@@~Debug:Build
      
    except:
      - schedules

    artifacts:
        reports:
          codequality: "codequality-clangtidy.json"
        paths:
          - "codequality-clangtidy.json"

    tags:
        - linux
        - docker
        - x86_64
    
    variables:
        HGUILD_PROFILE: Linux-X86_64@Clang@@
        HGUILD_BUILDTYPE: Debug
        HGUILD_SOURCENAME: libWexpr@CI

    before_script:
      - *hguild_before_script

    script:
        - echo -e "section_start:`date +%s`:hguild_install_deps\r\033[0KHGuild Install Deps"
        - '${HGUILD} install --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" --dependenciesOnly ${HGUILD_PROJECT_NAME}@CI'
        - echo -e "section_end:`date +%s`:hguild_install_deps\r\033[0K"
        - echo -e "section_start:`date +%s`:run_scheduler\r\033[0KRun clang-tidy coverage"
        - export BUILD_DIR=`${HGUILD} source:buildPath --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" ${HGUILD_SOURCENAME}`
        - export CATALYST_INSTALL_DIR=`${HGUILD} source:installPath --buildType "${HGUILD_BUILDTYPE}" --profile "${HGUILD_PROFILE}" Catalyst`
        - ruby ${CATALYST_INSTALL_DIR}Catalyst/Scripts/clangTidyCodeClimate.rb --sourceDir . --buildDir "${BUILD_DIR}" --ignorePaths '*/Private/ThirdParty/*' --ignoreChecks 'modernize-use-trailing-return-type;hicpp-deprecated-headers;modernize-deprecated-headers;modernize-use-using' > codequality-clangtidy.json
        - echo -e "section_end:`date +%s`:run_scheduler\r\033[0K"



